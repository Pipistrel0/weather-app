{"version":3,"sources":["services/transformWeather.js","constants/weathers.js","components/WeatherLocation/Location/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature/WeatherTemperature.js","components/WeatherLocation/WeatherData/index.js","constants/api_url.js","services/getUrlWeatherByCity.js","components/WeatherLocation/index.js","components/LocationList/LocationList.js","components/ForecastItem/index.js","services/transofrmForecast.js","components/ForecastExtended/ForecastExtended.js","store/index.js","App.js","actions/index.js","serviceWorker.js","index.js"],"names":["transformWeather","weather_data","kelvin","main","humidity","temp","speed","wind","weatherState","weather","id","getWeatherState","temperature","Number","convert","from","to","toFixed","Location","city","className","WeatherExtraInfo","icons","WeatherTemperature","icon","name","size","getWeatherIcon","WeatherData","data","api_key","getUrlWeatherByCity","WeatherLocation","props","handleUpdateClick","api_weather","state","fetch","then","resolve","json","newWeather","setState","this","prevProps","prevState","onWeatherLocationClick","onClick","React","Component","LocationList","cities","onSelectedLocation","map","key","handleWeatherLocationClick","strToComponents","ForecastItem","weekDay","hour","transformForecast","list","filter","item","moment","unix","dt","format","ForecastExtended","updateCity","url","forecastData","renderForecastItemDays","forecast","renderProgress","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","handleSelectedLocation","dispatch","type","value","basename","location","pathname","exact","path","AppBar","position","Toolbar","Typography","color","xs","md","Paper","zdepth","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.064b2d89.chunk.js","sourcesContent":["import convert from \"convert-units\";\r\nimport {\r\n  CLOUD,\r\n  SUN,\r\n  RAIN,\r\n  SNOW,\r\n  THUNDER,\r\n  DRIZZLE\r\n} from \"../constants/weathers\";\r\n\r\nconst getTemp = kelvin => {\r\n  return Number(\r\n    convert(kelvin)\r\n      .from(\"K\")\r\n      .to(\"C\")\r\n      .toFixed()\r\n  );\r\n};\r\n\r\nconst getWeatherState = weather => {\r\n  const { id } = weather;\r\n\r\n  if (id < 300) {\r\n    return THUNDER;\r\n  } else if (id < 400) {\r\n    return DRIZZLE;\r\n  } else if (id < 600) {\r\n    return RAIN;\r\n  } else if (id < 700) {\r\n    return SNOW;\r\n  } else if (id === 800) {\r\n    return SUN;\r\n  } else {\r\n    return CLOUD;\r\n  }\r\n};\r\n\r\nconst transformWeather = weather_data => {\r\n  const { humidity, temp } = weather_data.main;\r\n  const { speed } = weather_data.wind;\r\n  const weatherState = getWeatherState(weather_data.weather[0]);\r\n  const temperature = getTemp(temp);\r\n\r\n  const data = {\r\n    humidity,\r\n    temperature,\r\n    weatherState,\r\n    wind: `${speed} m/s`\r\n  };\r\n  return data;\r\n};\r\n\r\nexport default transformWeather;\r\n","export const CLOUD = \"cloud\";\r\n\r\nexport const SUN = \"sun\";\r\n\r\nexport const RAIN = \"rain\";\r\n\r\nexport const SNOW = \"snow\";\r\n\r\nexport const THUNDER = \"thunder\";\r\n\r\nexport const DRIZZLE = \"drizzle\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./../styles.css\";\r\n\r\nconst Location = ({ city }) => {\r\n  return (\r\n    <div className=\"locationCont\">\r\n      <h1>{city}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nLocation.propTypes = {\r\n  city: PropTypes.string.isRequired\r\n};\r\nexport default Location;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./../styles.css\";\r\n\r\nconst WeatherExtraInfo = ({ humidity, wind }) => (\r\n  <div className=\"weatherExtraInfoCont\">\r\n    <span className=\"extraInfoText\">Humedad: {humidity + \"% \"}</span>\r\n    <span className=\"extraInfoText\">Viento: {wind}</span>\r\n  </div>\r\n);\r\n\r\nWeatherExtraInfo.propTypes = {\r\n  humidity: PropTypes.number.isRequired,\r\n  wind: PropTypes.string.isRequired\r\n};\r\n\r\nexport default WeatherExtraInfo;\r\n","import React from \"react\";\r\nimport WeatherIcons from \"react-weathericons\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./../styles.css\";\r\nimport {\r\n  CLOUD,\r\n  SUN,\r\n  RAIN,\r\n  SNOW,\r\n  THUNDER,\r\n  DRIZZLE\r\n} from \"./../../../../constants/weathers.js\";\r\n\r\nconst icons = {\r\n  [CLOUD]: \"cloud\",\r\n  [SUN]: \"day-sunny\",\r\n  [RAIN]: \"rain\",\r\n  [SNOW]: \"snow\",\r\n  [THUNDER]: \"day-thunderstorm\",\r\n  [DRIZZLE]: \"day-showers\"\r\n};\r\n\r\nconst getWeatherIcon = weatherState => {\r\n  const icon = icons[weatherState];\r\n  const sizeIcon = \"4x\";\r\n  if (icon)\r\n    return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\r\n  else\r\n    return <WeatherIcons className=\"wicon\" name=\"day-sunny\" size={sizeIcon} />;\r\n};\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState }) => (\r\n  <div className=\"weatherTemperatureCont\">\r\n    {\" \"}\r\n    {getWeatherIcon(weatherState)}\r\n    <span className=\"temperature\">{`${temperature}`}</span>\r\n    <span className=\"temperatureType\">{`CÂ°`}</span>{\" \"}\r\n  </div>\r\n);\r\n\r\nWeatherTemperature.propTypes = {\r\n  temperature: PropTypes.number.isRequired,\r\n  weatherState: PropTypes.string.isRequired\r\n};\r\n\r\nexport default WeatherTemperature;\r\n","import React from \"react\";\r\nimport WeatherExtraInfo from \"./WeatherExtraInfo/WeatherExtraInfo.js\";\r\nimport WeatherTemperature from \"./WeatherTemperature/WeatherTemperature.js\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherData = ({\r\n  data: { temperature, weatherState, humidity, wind }\r\n}) => (\r\n  <div className=\"weatherDataCont\">\r\n    <WeatherTemperature temperature={temperature} weatherState={weatherState} />\r\n    <WeatherExtraInfo humidity={humidity} wind={wind} />\r\n  </div>\r\n);\r\n\r\nWeatherData.propTypes = {\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default WeatherData;\r\n","export const api_key = \"61c7ef47df4c6a970210c8b3a1660656\";\r\nexport const url_base_weather =\r\n  \"https://api.openweathermap.org/data/2.5/weather\";\r\n\r\nexport const url_forecast = \"https://api.openweathermap.org/data/2.5/forecast\";\r\n","import { url_base_weather, api_key } from \"./../constants/api_url.js\";\r\n\r\nconst getUrlWeatherByCity = city => {\r\n  return `${url_base_weather}?q=${city}&appid=${api_key}`;\r\n};\r\n\r\nexport default getUrlWeatherByCity;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CircularProgeress from \"@material-ui/core/CircularProgress\";\r\nimport transformWeather from \"./../../services/transformWeather.js\";\r\nimport Location from \"./Location/Location.js\";\r\nimport WeatherData from \"./WeatherData/index.js\";\r\nimport \"./styles.css\";\r\nimport getUrlWeatherByCity from \"./../../services/getUrlWeatherByCity\";\r\n\r\nclass WeatherLocation extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { city } = props;\r\n    this.state = {\r\n      city,\r\n      data: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.handleUpdateClick();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {}\r\n\r\n  handleUpdateClick = () => {\r\n    const api_weather = getUrlWeatherByCity(this.state.city);\r\n\r\n    fetch(api_weather)\r\n      .then(resolve => {\r\n        return resolve.json();\r\n      })\r\n      .then(data => {\r\n        const newWeather = transformWeather(data);\r\n        this.setState({\r\n          data: newWeather\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { onWeatherLocationClick } = this.props;\r\n    const { city, data } = this.state;\r\n    return (\r\n      <div className=\"weatherLocationCont\" onClick={onWeatherLocationClick}>\r\n        <Location city={city} />\r\n        {data ? <WeatherData data={data} /> : <CircularProgeress size={50} />}\r\n        {/* <button onClick={this.handleUpdateClick}>Actualizar</button> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  onWeatherLocationClick: PropTypes.func\r\n};\r\nexport default WeatherLocation;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherLocation from \"./../WeatherLocation\";\r\nimport \"./styles.css\";\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n  const handleWeatherLocationClick = city => {\r\n    onSelectedLocation(city);\r\n  };\r\n\r\n  const strToComponents = cities => {\r\n    return cities.map(city => (\r\n      <WeatherLocation\r\n        key={city}\r\n        city={city}\r\n        onWeatherLocationClick={() => handleWeatherLocationClick(city)}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return <div className=\"locationList\">{strToComponents(cities)}</div>;\r\n};\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelectedLocation: PropTypes.func\r\n};\r\n\r\nexport default LocationList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherData from \"./../WeatherLocation/WeatherData\";\r\n\r\nconst ForecastItem = ({ weekDay, hour, data }) => (\r\n  <div>\r\n    <div>\r\n      <h2>\r\n        {weekDay} - {hour}hs\r\n      </h2>\r\n    </div>\r\n    <WeatherData data={data} />\r\n  </div>\r\n);\r\n\r\nForecastItem.propTypes = {\r\n  weekDay: PropTypes.string.isRequired,\r\n  hour: PropTypes.number.isRequired,\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default ForecastItem;\r\n","import moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport transformWeather from \"./transformWeather\";\r\n\r\nconst transformForecast = data =>\r\n  data.list\r\n    .filter(\r\n      item =>\r\n        moment.unix(item.dt).hour() === 6 ||\r\n        moment.unix(item.dt).hour() === 12 ||\r\n        moment.unix(item.dt).hour() === 18\r\n    )\r\n    .map(item => ({\r\n      weekDay: moment.unix(item.dt).format(\"dddd\"),\r\n      hour: moment.unix(item.dt).hour(),\r\n      data: transformWeather(item)\r\n    }));\r\n\r\nexport default transformForecast;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ForecastItem from \"./../ForecastItem\";\r\nimport \"./../LocationList/styles.css\";\r\nimport { api_key, url_forecast } from \"./../../constants/api_url\";\r\nimport transformForecast from \"./../../services/transofrmForecast.js\";\r\n\r\nclass ForecastExtended extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { forecastData: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateCity(this.props.city);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.city !== prevProps.city) {\r\n      this.setState({ forecastData: null });\r\n      this.updateCity(this.props.city);\r\n    }\r\n  }\r\n\r\n  updateCity = city => {\r\n    const url = `${url_forecast}?q=${this.props.city}&appid=${api_key}`;\r\n    fetch(url).then(data =>\r\n      data.json().then(weather_data => {\r\n        const forecastData = transformForecast(weather_data);\r\n        this.setState({ forecastData });\r\n      })\r\n    );\r\n  };\r\n  renderForecastItemDays = forecastData => {\r\n    return forecastData.map(forecast => (\r\n      <ForecastItem\r\n        weekDay={forecast.weekDay}\r\n        hour={forecast.hour}\r\n        key={`${forecast.weekDay}${forecast.hour}`}\r\n        data={forecast.data}\r\n      />\r\n    ));\r\n  };\r\n\r\n  renderProgress = () => {\r\n    return <h3>cargando pronostico...</h3>;\r\n  };\r\n\r\n  render() {\r\n    const { city } = this.props;\r\n    const { forecastData } = this.state;\r\n    return (\r\n      <div>\r\n        <h2 className=\"forecast-title\">Pronostico para {city}</h2>\r\n        {forecastData\r\n          ? this.renderForecastItemDays(forecastData)\r\n          : this.renderProgress()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nForecastExtended.propTypes = {\r\n  city: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ForecastExtended;\r\n","import { createStore } from \"redux\";\r\n\r\nexport const store = createStore(() => {},\r\nwindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport \"./App.css\";\nimport LocationList from \"./components/LocationList/LocationList.js\";\nimport ForecastExtended from \"./components/ForecastExtended/ForecastExtended.js\";\nimport { store } from \"./store\";\nimport { setCity } from \"./actions\";\n\nconst cities = [\n  \"Buenos Aires\",\n  \"Bogota\",\n  \"Barcelona\",\n  \"Mexico\",\n  \"Montevideo\",\n  \"Santiago\",\n  \"Washington\",\n  \"Madrid\",\n  \"Lima\"\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: null\n    };\n  }\n\n  handleSelectedLocation = city => {\n    this.setState({ city });\n\n    store.dispatch(setCity(city));\n  };\n\n  render() {\n    const { city } = this.state;\n    return (\n      <Router basename={window.location.pathname || \"\"}>\n        <Route exact path=\"/\">\n          <Grid>\n            <Row>\n              <AppBar position=\"sticky\">\n                <Toolbar>\n                  <Typography color=\"inherit\">Weather-App</Typography>\n                </Toolbar>\n              </AppBar>\n            </Row>\n            <Row>\n              <Col xs={12} md={6}>\n                <LocationList\n                  cities={cities}\n                  onSelectedLocation={this.handleSelectedLocation}\n                />\n              </Col>\n              <Col xs={12} md={6}>\n                <Paper zdepth={4}>\n                  <div className=\"details\">\n                    {city === null ? null : <ForecastExtended city={city} />}\n                  </div>\n                </Paper>\n              </Col>\n            </Row>\n          </Grid>\n        </Route>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","export const SET_CITY = \"SET_CITY\";\r\n\r\nexport const setCity = value => ({\r\n  type: SET_CITY,\r\n  value\r\n});\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}